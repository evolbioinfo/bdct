import os

# To run locally:
# snakemake --snakefile Snakefile_simulate --rerun-triggers mtime --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"


localrules: all


folder = config.get("folder", '')
num = int(config.get("num", 100))
REPETITIONS = list(range(num))
os.makedirs('logs', exist_ok=True)

m, M = int(config.get('min', 500)), int(config.get('max', 1000))
MODELS = ['BDCT', 'BDEICT', 'BDSSCT']

rule all:
    input:
        expand(os.path.join(folder, '{model}{n}', 'tree.{i}.nwk'), i=REPETITIONS, \
            n=[0, 1, 2, M], k=range(0, 100), model=MODELS),
    shell:
        """
        snakemake --snakefile Snakefile_estimate --keep-going --cores 12 --config num={num} sf={folder} --unlock 2> /dev/null
        snakemake --snakefile Snakefile_estimate --keep-going --cores 12 --config num={num} sf={folder}
        """


rule simulate_bdct_tree:
    '''
    Simulate a BDCT tree.
    '''
    output:
        log=os.path.join(folder,'BDCT{n}', 'tree.{i}.log'),
        nwk=os.path.join(folder,'BDCT{n}', 'tree.{i}.nwk'),
    params:
        mem=2000,
        name='tre{n}.{i}',
        qos='fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.2.3"
    shell:
        """        
        while [ ! -f {output.nwk} ]
        do             
            python3 py/parameter_generator.py --log {output.log}.params  --kappa {wildcards.n} \
            --min_R0 1 \
            --max_R0 10  \
            --min_rho 0.05  \
            --max_rho 0.75  \
            --min_di 1  \
            --max_di 21  \
            --min_rho_ups 0.01  \
            --max_ups 0.75  \
            --min_phi_by_psi 10  \
            --max_phi_by_psi 500  \
            --min_f 0.01  \
            --max_f 0.5  \
            --min_x 2  \
            --max_x 100  \
            --min_de_by_di_de 0.05  \
            --max_de_by_di_de 0.95  
        
            la=`tail -n 1 {output.log}.params | awk -F',' '{{ print $1 }}'`
            psi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $2 }}'`
            p=`tail -n 1 {output.log}.params | awk -F',' '{{ print $3 }}'`
            phi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $4 }}'`
            upsilon=`tail -n 1 {output.log}.params | awk -F',' '{{ print $5 }}'`
            
            SECONDS=0
            while (( SECONDS < 900)); 
            do    
                timeout 4m generate_bd --min_tips {m} --max_tips {M} --la $la --psi $psi --p $p \
                --phi $phi  --upsilon $upsilon --max_notified_contacts {wildcards.n} \
                --nwk {output.nwk} --log {output.log} || echo 'The tree took too long, restarting!'
                
                if [[ -f {output.nwk} ]]; then
                    break
                fi    
            done
            
            rm -rf {output.log}.params
            
            if [[ -f {output.nwk} ]]; then
                # remove the root branch
                sed -i 's/:[0-9\\.]\\+;/;/g' {output.nwk}
                break
            fi
            
            echo 'The parameter set took too long, restarting!'
        done
        """



rule simulate_bdeict_tree:
    '''
    Simulate a BDCT tree.
    '''
    output:
        log=os.path.join(folder,'BDEICT{n}','tree.{i}.log'),
        nwk=os.path.join(folder,'BDEICT{n}','tree.{i}.nwk'),
    params:
        mem=2000,
        name='tre{n}.{i}',
        qos='fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.2.3"
    shell:
        """        
        while [ ! -f {output.nwk} ]
        do             
            python3 py/parameter_generator.py --log {output.log}.params  --kappa {wildcards.n} \
            --min_R0 1 \
            --max_R0 10  \
            --min_rho 0.05  \
            --max_rho 0.75  \
            --min_di 1  \
            --max_di 21  \
            --min_rho_ups 0.01  \
            --max_ups 0.75  \
            --min_phi_by_psi 10  \
            --max_phi_by_psi 500  \
            --min_f 0.01  \
            --max_f 0.5  \
            --min_x 2  \
            --max_x 100  \
            --min_de_by_di_de 0.05  \
            --max_de_by_di_de 0.95  

            la=`tail -n 1 {output.log}.params | awk -F',' '{{ print $1 }}'`
            psi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $2 }}'`
            p=`tail -n 1 {output.log}.params | awk -F',' '{{ print $3 }}'`
            phi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $4 }}'`
            upsilon=`tail -n 1 {output.log}.params | awk -F',' '{{ print $5 }}'`
            mu=`tail -n 1 {output.log}.params | awk -F',' '{{ print $6 }}'`

            SECONDS=0
            while (( SECONDS < 900)); 
            do    
                timeout 4m generate_bdei --min_tips {m} --max_tips {M} --la $la --psi $psi --p $p --mu $mu \
                --phi $phi  --upsilon $upsilon --max_notified_contacts {wildcards.n} \
                --nwk {output.nwk} --log {output.log} || echo 'The tree took too long, restarting!'

                if [[ -f {output.nwk} ]]; then
                    break
                fi    
            done

            rm -rf {output.log}.params

            if [[ -f {output.nwk} ]]; then
                # remove the root branch
                sed -i 's/:[0-9\\.]\\+;/;/g' {output.nwk}
                break
            fi

            echo 'The parameter set took too long, restarting!'
        done
        """


rule simulate_bdssct_tree:
    '''
    Simulate a BDSSCT tree.
    '''
    output:
        log=os.path.join(folder,'BDSSCT{n}','tree.{i}.log'),
        nwk=os.path.join(folder,'BDSSCT{n}','tree.{i}.nwk'),
    params:
        mem=2000,
        name='tre{n}.{i}',
        qos='fast'
    threads: 1
    singularity: "docker://evolbioinfo/treesimulator:v0.2.3"
    shell:
        """        
        while [ ! -f {output.nwk} ]
        do             
            python3 py/parameter_generator.py --log {output.log}.params  --kappa {wildcards.n} \
            --min_R0 1 \
            --max_R0 10  \
            --min_rho 0.05  \
            --max_rho 0.75  \
            --min_di 1  \
            --max_di 21  \
            --min_rho_ups 0.01  \
            --max_ups 0.75  \
            --min_phi_by_psi 10  \
            --max_phi_by_psi 500  \
            --min_f 0.01  \
            --max_f 0.5  \
            --min_x 2  \
            --max_x 100  \
            --min_de_by_di_de 0.05  \
            --max_de_by_di_de 0.95  

            
            lass=`tail -n 1 {output.log}.params | awk -F',' '{{ print $9 }}'`
            lann=`tail -n 1 {output.log}.params | awk -F',' '{{ print $10 }}'`
            lasn=`tail -n 1 {output.log}.params | awk -F',' '{{ print $11 }}'`
            lans=`tail -n 1 {output.log}.params | awk -F',' '{{ print $12 }}'`
            psi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $2 }}'`
            p=`tail -n 1 {output.log}.params | awk -F',' '{{ print $3 }}'`
            phi=`tail -n 1 {output.log}.params | awk -F',' '{{ print $4 }}'`
            upsilon=`tail -n 1 {output.log}.params | awk -F',' '{{ print $5 }}'`

            SECONDS=0
            while (( SECONDS < 900)); 
            do    
                timeout 4m generate_bdss --min_tips {m} --max_tips {M} \
                --la_ss $lass --la_sn $lasn --la_nn $lann --la_ns $lans \
                --psi $psi --p $p \
                --phi $phi  --upsilon $upsilon --max_notified_contacts {wildcards.n} \
                --nwk {output.nwk} --log {output.log} || echo 'The tree took too long, restarting!'

                if [[ -f {output.nwk} ]]; then
                    break
                fi    
            done

            rm -rf {output.log}.params

            if [[ -f {output.nwk} ]]; then
                # remove the root branch
                sed -i 's/:[0-9\\.]\\+;/;/g' {output.nwk}
                break
            fi

            echo 'The parameter set took too long, restarting!'
        done
        """
